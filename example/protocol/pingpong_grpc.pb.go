// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pingpong.proto

package examplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExampleSvc_Ping_FullMethodName = "/examplepb.ExampleSvc/Ping"
)

// ExampleSvcClient is the client API for ExampleSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleSvcClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRsp, error)
}

type exampleSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleSvcClient(cc grpc.ClientConnInterface) ExampleSvcClient {
	return &exampleSvcClient{cc}
}

func (c *exampleSvcClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRsp, error) {
	out := new(PingRsp)
	err := c.cc.Invoke(ctx, ExampleSvc_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleSvcServer is the server API for ExampleSvc service.
// All implementations must embed UnimplementedExampleSvcServer
// for forward compatibility
type ExampleSvcServer interface {
	Ping(context.Context, *PingReq) (*PingRsp, error)
	mustEmbedUnimplementedExampleSvcServer()
}

// UnimplementedExampleSvcServer must be embedded to have forward compatible implementations.
type UnimplementedExampleSvcServer struct {
}

func (UnimplementedExampleSvcServer) Ping(context.Context, *PingReq) (*PingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedExampleSvcServer) mustEmbedUnimplementedExampleSvcServer() {}

// UnsafeExampleSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleSvcServer will
// result in compilation errors.
type UnsafeExampleSvcServer interface {
	mustEmbedUnimplementedExampleSvcServer()
}

func RegisterExampleSvcServer(s grpc.ServiceRegistrar, srv ExampleSvcServer) {
	s.RegisterService(&ExampleSvc_ServiceDesc, srv)
}

func _ExampleSvc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleSvcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleSvc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleSvcServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleSvc_ServiceDesc is the grpc.ServiceDesc for ExampleSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "examplepb.ExampleSvc",
	HandlerType: (*ExampleSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ExampleSvc_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pingpong.proto",
}
